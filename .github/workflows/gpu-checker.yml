name: Cloud GPU Capacity Checker

on:
  schedule:
    - cron: '0 13 * * *'  # Run every day at 1:00 PM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  run-capacity-checker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv
        pip list
    
    - name: Comprehensive Environment and Secret Check
      env:
        DB_API_URL: ${{ secrets.DB_API_URL }}
        DB_API_KEY: ${{ secrets.DB_API_KEY }}
      run: |
        python3 - <<EOF
        import os
        
        # Explicitly set environment variables
        env_vars = {
            'DB_API_URL': '${{ secrets.DB_API_URL }}',
            'DB_API_KEY': '${{ secrets.DB_API_KEY }}'
        }
        
        # Create .env file
        with open('.env', 'w') as f:
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
        
        # Verify .env file contents (without printing full secrets)
        print("Created .env file:")
        with open('.env', 'r') as f:
            for line in f:
                print(line.split('=')[0] + '=***REDACTED***')
        
        # Set environment variables
        for key, value in env_vars.items():
            os.environ[key] = value
        EOF
        
    - name: Detailed Database Connection Test
      run: |
        python3 <<EOF
        import os
        import sys
        import json
        import requests
        from dotenv import load_dotenv
        
        # Explicitly load environment variables
        load_dotenv('.env', override=True)
        
        # Detailed environment variable check
        print("Python Environment Check:")
        print("-" * 30)
        print("Python Version:", sys.version)
        print("Python Executable:", sys.executable)
        print("\nEnvironment Variables:")
        
        # Safely print environment variables
        env_vars = ['DB_API_URL', 'DB_API_KEY']
        for var in env_vars:
            value = os.getenv(var, 'NOT SET')
            # Only print first 5 chars of non-empty values
            print(f"{var}: {value[:5] + '...' if value and value != 'NOT SET' else value}")
        
        # Database connection test
        db_api_url = os.getenv('DB_API_URL')
        db_api_key = os.getenv('DB_API_KEY')
        
        if not db_api_url or not db_api_key:
            print("\nError: Missing DB_API_URL or DB_API_KEY")
            sys.exit(1)
        
        print("\nAttempting Database Connection:")
        print(f"API Endpoint: {db_api_url}")
        
        try:
            response = requests.post(
                db_api_url,
                headers={'x-api-key': db_api_key},
                json={'operation': 'verify_database'},
                timeout=30
            )
            
            print("Response Details:")
            print(f"Status Code: {response.status_code}")
            print("Response Headers:")
            for header, value in response.headers.items():
                print(f"{header}: {value}")
            
            print("\nResponse Body:")
            try:
                result = response.json()
                print(json.dumps(result, indent=2))
            except ValueError:
                print("Response is not JSON:")
                print(response.text)
            
            if response.status_code != 200:
                print(f"\nError: Unexpected status code {response.status_code}")
                sys.exit(1)
        
        except requests.exceptions.RequestException as e:
            print(f"\nRequest Error: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"\nUnexpected Error: {e}")
            sys.exit(1)
        EOF
      
    - name: Run AWS capacity checker
      run: |
        echo "Running AWS capacity checker..."
        python checkers/aws_capacity_checker.py
        echo "AWS script exit code: $?"
      continue-on-error: true
      
    - name: Run Azure capacity checker
      run: |
        echo "Running Azure capacity checker..."
        python checkers/azure_capacity_checker.py
        echo "Azure script exit code: $?"
      continue-on-error: true
      
    - name: Run GCP capacity checker
      run: |
        echo "Running GCP capacity checker..."
        python checkers/gcp_capacity_checker.py
        echo "GCP script exit code: $?"
      continue-on-error: true
      
    - name: Report completion
      if: always()
      run: |
        echo "GPU Checker job completed at $(date)"