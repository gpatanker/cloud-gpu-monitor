name: Cloud GPU Capacity Checker

on:
  schedule:
    - cron: '0 13 * * *'  # Run monthly
  workflow_dispatch:  # Allow manual triggering

jobs:
  run-capacity-checker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up GCP credentials
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        export_environment_variables: true
    
    - name: Create .env file
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> .env
        echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> .env
        echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> .env
        echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> .env
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
        echo "DB_API_URL=${{ secrets.DB_API_URL }}" >> .env
        echo "DB_API_KEY=${{ secrets.DB_API_KEY }}" >> .env
        echo "DEBUG=True" >> .env
  
        - name: Debug environment variables
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing .env file:"
          cat .env || echo ".env file not found!"
          
          echo "Environment variables set in GitHub:"
          env | grep -v -E 'PASSWORD|SECRET|TOKEN|KEY' || echo "No environment variables found!"
          
          echo "Creating explicit debug variables:"
          export DEBUG_API_URL="${{ secrets.DB_API_URL }}"
          echo "Debug API URL (masked): ${DEBUG_API_URL:0:8}...${DEBUG_API_URL: -4}"
          
          echo "Testing direct secret access:"
          python -c "
          import os
          
          # Try directly from GitHub secrets
          direct_url = '${{ secrets.DB_API_URL }}'
          print(f'Direct secret access: ', 'Available' if direct_url else 'Not available')
          
          # Check if DB_API_URL is in environment
          env_url = os.environ.get('DB_API_URL')
          print(f'From os.environ: ', 'Available' if env_url else 'Not available')
          "
          
          echo "Testing with dotenv:"
          python -c "
          import os
          from dotenv import load_dotenv
          
          print('Before loading .env:')
          print('DB_API_URL in env:', 'DB_API_URL' in os.environ)
          
          try:
              load_dotenv(verbose=True)
              print('Successfully loaded .env file')
          except Exception as e:
              print(f'Error loading .env: {e}')
          
          print('After loading .env:')
          print('DB_API_URL in env:', 'DB_API_URL' in os.environ)
          print('DB_API_URL value:', os.environ.get('DB_API_URL', 'Not found'))
          "
      
    - name: Fix missing environment variables
      run: |
        echo "Adding explicit environment variables to .env file"
        echo "DB_API_URL=${{ secrets.DB_API_URL }}" >> .env
        echo "DB_API_KEY=${{ secrets.DB_API_KEY }}" >> .env
          
        echo "Verifying .env file contents (excluding sensitive values):"
        grep -v -E 'PASSWORD|SECRET|KEY' .env || echo "No matching content found in .env"
        
    - name: Verify database connection
      run: |
        python -c "
        import requests
        import json
        import os
        
        response = requests.post(
            os.environ['DB_API_URL'],
            headers={'x-api-key': os.environ['DB_API_KEY']},
            json={'operation': 'verify_database'}
        )
        
        result = response.json()
        print(f'Database connection test: {result}')
        
        if response.status_code != 200:
            raise Exception(f'Database connection failed: {result}')
        "
      
    - name: Run AWS capacity checker
      run: |
        echo "Running AWS capacity checker..."
        python checkers/aws_capacity_checker.py
        echo "AWS script exit code: $?"
      continue-on-error: true
      
    - name: Run Azure capacity checker
      run: |
        echo "Running Azure capacity checker..."
        python checkers/azure_capacity_checker.py
        echo "Azure script exit code: $?"
      continue-on-error: true
      
    - name: Run GCP capacity checker
      run: |
        echo "Running GCP capacity checker..."
        python checkers/gcp_capacity_checker.py
        echo "GCP script exit code: $?"
      continue-on-error: true
      
    - name: Report completion
      if: always()
      run: |
        echo "GPU Checker job completed at $(date)"