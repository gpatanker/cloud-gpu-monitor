name: Cloud GPU Capacity Checker

on:
  schedule:
    - cron: '0 13 * * *'  # Run every day at 1:00 PM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  run-capacity-checker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import sys; print('Python executable:', sys.executable); print('Python version:', sys.version)"
        pip list
    
    - name: Set up GCP credentials
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        export_environment_variables: true
    
    - name: Create .env file
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> .env
        echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> .env
        echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> .env
        echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> .env
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
        echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
        echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
        echo "DEBUG=True" >> .env
        
    - name: Check file structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Files in checkers directory (if exists):"
        ls -la checkers/ || echo "Checkers directory not found"
    
    - name: Verify database connection
      run: |
        echo "Testing database connectivity..."
        python -c "
        import mysql.connector
        import os
        import time
        from dotenv import load_dotenv
        
        load_dotenv()
        
        # Print environment info without exposing credentials
        print('Environment variables (partial):')
        for key in ['MYSQL_HOST', 'MYSQL_PORT', 'MYSQL_USER', 'MYSQL_DATABASE']:
            print(f'{key}: {os.getenv(key)}')
        
        # Test database connection
        db_config = {
            'host': os.getenv('MYSQL_HOST'),
            'port': int(os.getenv('MYSQL_PORT', '3306')),
            'user': os.getenv('MYSQL_USER'),
            'password': os.getenv('MYSQL_PASSWORD'),
            'database': os.getenv('MYSQL_DATABASE'),
            'connect_timeout': 60
        }
        
        print(f'Connecting to {db_config[\"host\"]}:{db_config[\"port\"]}...')
        try:
            conn = mysql.connector.connect(**db_config)
            print('Connection successful!')
            cursor = conn.cursor()
            cursor.execute('SHOW TABLES')
            tables = cursor.fetchall()
            print('Available tables:')
            for table in tables:
                print(f'- {table[0]}')
                cursor.execute(f'SELECT COUNT(*) FROM {table[0]}')
                count = cursor.fetchone()[0]
                print(f'  Records: {count}')
            cursor.close()
            conn.close()
        except Exception as e:
            print(f'Connection error: {e}')
            raise
        "
      
    - name: Run AWS capacity checker
      run: |
        echo "Running AWS capacity checker..."
        python checkers/aws_capacity_checker.py
        echo "AWS script exit code: $?"
      continue-on-error: true
      
    - name: Run Azure capacity checker
      run: |
        echo "Running Azure capacity checker..."
        python checkers/azure_capacity_checker.py
        echo "Azure script exit code: $?"
      continue-on-error: true
      
    - name: Run GCP capacity checker
      run: |
        echo "Running GCP capacity checker..."
        python checkers/gcp_capacity_checker.py
        echo "GCP script exit code: $?"
      continue-on-error: true
      
    - name: Report completion
      if: always()
      run: |
        echo "GPU Checker job completed at $(date)"